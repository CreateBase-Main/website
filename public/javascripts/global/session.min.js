let session={initialise:(void 0,async()=>{try{await session.create()}catch(t){return}let t;try{t=await session.status()}catch(t){return}"unset"===t&&session.show()}),create:(void 0,()=>new Promise(async(t,e)=>{let s;try{s=(await axios.get("/session/create")).data}catch(t){return void e(t)}"failed"!==s.status?t(s.content):e(s.content)})),save:(void 0,()=>new Promise(async(t,e)=>{let s;try{s=(await axios.get("/session/save")).data}catch(t){return void e(t)}"failed"!==s.status?t(s.content):e(s.content)})),unsave:(void 0,()=>new Promise(async(t,e)=>{let s;try{s=(await axios.get("/session/unsave")).data}catch(t){return void e(t)}"failed"!==s.status?t(s.content):e(s.content)})),status:(void 0,()=>new Promise(async(t,e)=>{let s;try{s=(await axios.get("/session/status")).data}catch(t){return void e(t)}"failed"!==s.status?t(s.content):e(s.content)})),cancel:(void 0,async()=>{let t;document.querySelector("#cookie-container").classList.add("hide");try{t=await session.unsave()}catch(t){return}}),show:(void 0,()=>{document.querySelector("#cookie-container").classList.remove("hide")}),allow:(void 0,async()=>{let t;document.querySelector("#cookie-container").classList.add("hide");try{t=await session.save()}catch(t){return}})};